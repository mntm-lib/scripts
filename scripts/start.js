// @ts-expect-error module
require('../lib/unhandled');
require('../lib/paths');

// Do this as the first thing so that any code reading it knows the right env.
const env = require('../lib/env');

env.fallback('development');

const fs = require('fs-extra');
const chalk = require('chalk');
const webpack = require('webpack');
const WebpackDevServer = require('webpack-dev-server');
const clearConsole = require('../lib/clearConsole');
const {
  choosePort,
  createCompiler,
  prepareUrls
} = require('../lib/WebpackDevServerUtils');
const openBrowser = require('../lib/openBrowser');
const paths = require('../config/paths');
const configFactory = require('../config/webpack.config');
const createDevServerConfig = require('../config/webpackDevServer.config');
const execBin = require('../lib/bin');
const isInteractive = process.stdout.isTTY;

const HOST = '0.0.0.0';
const PORT = 3000;
const PROTO = 'http';
const WS = 'ws';

// We require that you explicitly set browsers and do not fall back to
// browserslist defaults.
Promise.resolve().
  then(() => {
    return choosePort(HOST, PORT);
  }).
  then(async (port) => {
    const config = configFactory;
    const appName = require(paths.appPackageJson).name;

    const urls = prepareUrls(
      PROTO,
      HOST,
      port,
      paths.publicUrlOrPath.slice(0, -1)
    );

    // Create a webpack compiler that is configured with custom messages.
    const compiler = createCompiler({
      appName,
      config,
      urls,
      webpack
    });

    // Serve webpack assets generated by the compiler over a web server.
    const serverConfig = createDevServerConfig(HOST, PORT);
    const devServer = new WebpackDevServer(compiler, serverConfig);

    // Handle stop
    const stop = () => {
      devServer.close();
      process.exit();
    };

    process.on('SIGINT', stop);
    process.on('SIGTERM', stop);
    process.stdin.on('end', stop);

    // Wait done.
    const done = new Promise((resolve) => {
      compiler.hooks.done.tap('openBrowser', () => {
        resolve(urls.appUrlForBrowser);
      });
    });

    // Launch WebpackDevServer.
    return devServer.start().then(async () => {
      if (isInteractive) {
        clearConsole();
      }

      console.log(chalk.cyan('Starting the development server...\n'));

      return done;
    });
  }).
  then((url) => {
    openBrowser(url);

    if (fs.existsSync(paths.vkTunnelConfig)) {
      // Allow all certs
      // @ts-expect-error force number
      process.env.NODE_TLS_REJECT_UNAUTHORIZED = 0;

      // Proxy without cert
      process.env.PROXY_HTTP_PROTO = PROTO;
      process.env.PROXY_WS_PROTO = WS;

      // Assign current host and port
      process.env.PROXY_HOST = HOST;

      // @ts-expect-error force number
      process.env.PROXY_PORT = PORT;

      // Log only errors
      process.env.LOGLEVEL = 'error';

      execBin('@vkontakte/vk-tunnel');
    }
  }).
  catch((ex) => {
    if (ex && ex.message) {
      console.log(ex.message);
    }
    process.exit(1);
  });
